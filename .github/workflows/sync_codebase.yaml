name: Sync Codebase to Vector Store

on:
  push:
    branches:
      - main

jobs:
  sync-codebase:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install openai

      - name: Sync files to OpenAI Vector Store
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VECTOR_STORE_ID: ${{ secrets.VECTOR_STORE_ID }}
        run: |
          python -c "
          import os
          from pathlib import Path
          from openai import OpenAI

          print('--- Starting Vector Store Sync ---')

          client = OpenAI()
          vector_store_id = os.getenv('VECTOR_STORE_ID')

          if not vector_store_id:
              print('❌ VECTOR_STORE_ID secret not found. Aborting.')
              exit(1)

          # --- THE CRITICAL FIX IS HERE ---
          # Define a set of allowed extensions for code and documentation.
          ALLOWED_EXTENSIONS = {'.py', '.md', '.toml', '.txt'}

          repo_path = Path('.')
          files_to_upload = [
              p for p in repo_path.rglob('*')
              if p.is_file() and
                 p.stat().st_size > 0 and
                 p.suffix in ALLOWED_EXTENSIONS and # Check against the allowlist
                 '.git' not in p.parts and
                 '.github' not in p.parts and
                 '.venv' not in p.parts and
                 '__pycache__' not in p.parts
          ]
          # --- End of critical fix section ---

          if not files_to_upload:
              print('No allowed, non-empty files found to upload. Exiting.')
              exit(0)
              
          print(f'Found {len(files_to_upload)} allowed, non-empty files to upload:')
          for f in files_to_upload:
              print(f'  - {f}')
          
          file_streams = [open(path, 'rb') for path in files_to_upload]
          try:
              file_batch = client.vector_stores.file_batches.upload_and_poll(
                  vector_store_id=vector_store_id, files=file_streams
              )
              print(f'✅ Batch upload complete. Status: {file_batch.status}')
              print(f'   File counts: {file_batch.file_counts}')
          except Exception as e:
              print(f'❌ An error occurred during file upload: {e}')
              exit(1)
          finally:
              for f in file_streams:
                  f.close()

          print('--- Sync Complete ---')
          "
