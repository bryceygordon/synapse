# Name of the GitHub Action, visible in the "Actions" tab.
name: Sync Codebase to Vector Store

# This action triggers on every push to the 'main' branch.
on:
  push:
    branches:
      - main

# Defines the job that will be executed.
jobs:
  sync-codebase:
    # The job will run on the latest version of Ubuntu.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code so the action can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up a Python environment.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Install the required OpenAI library.
      - name: Install dependencies
        run: pip install openai

      # Step 4: Run the Python script to sync files.
      - name: Sync files to OpenAI Vector Store
        # This 'env' block makes our GitHub Secrets available as environment variables inside the script.
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VECTOR_STORE_ID: ${{ secrets.VECTOR_STORE_ID }}
        # The python -c flag allows us to run a multi-line script directly.
        run: |
          python -c "
          import os
          from pathlib import Path
          from openai import OpenAI

          print('--- Starting Vector Store Sync ---')

          # 1. Initialize client and get variables
          client = OpenAI()
          vector_store_id = os.getenv('VECTOR_STORE_ID')

          if not vector_store_id:
              print('❌ VECTOR_STORE_ID secret not found. Aborting.')
              exit(1)

          # 2. Find all relevant files to upload.
          # We exclude hidden files/dirs, the venv, and __pycache__.
          repo_path = Path('.')
          files_to_upload = [
              p for p in repo_path.rglob('*')
              if p.is_file() and
              '.git' not in p.parts and
              '.github' not in p.parts and
              '.venv' not in p.parts and
              '__pycache__' not in p.parts
          ]

          if not files_to_upload:
              print('No files found to upload. Exiting.')
              exit(0)

          print(f'Found {len(files_to_upload)} files to upload.')

          # 3. Use the upload_and_poll helper for convenience.
          try:
              with [open(path, 'rb') for path in files_to_upload] as file_streams:
                  file_batch = client.vector_stores.file_batches.upload_and_poll(
                      vector_store_id=vector_store_id, files=file_streams
                  )

              print(f'✅ Batch upload complete. Status: {file_batch.status}')
              print(f'   File counts: {file_batch.file_counts}')

          except Exception as e:
              print(f'❌ An error occurred during file upload: {e}')
              exit(1)

          print('--- Sync Complete ---')
          "
